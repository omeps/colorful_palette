#version 450
struct Pixel {
	vec3 color;
	uint mean;
};
layout(std140, binding = 1) buffer PixelSSBO {
   Pixel pixels[];
};
layout(std140, binding = 0) readonly buffer MeansSSBO {
   vec3 means[];
};

layout (push_constant) uniform Constants {
	uint mean_count;
} constants;
const mat3 RGB2OKLAB_A = mat3(
    0.2104542553, 1.9779984951, 0.0259040371,
    0.7936177850, -2.4285922050, 0.7827717662,
    -0.0040720468, 0.4505937099, -0.8086757660);

const mat3 RGB2OKLAB_B = mat3(
    0.4122214708, 0.2119034982, 0.0883024619,
    0.5363325363, 0.6806995451, 0.2817188376,
    0.0514459929, 0.1073969566, 0.6299787005);
vec3 rgb2oklab(const in vec3 rgb) {
    vec3 lms = RGB2OKLAB_B * rgb;
    return RGB2OKLAB_A * (sign(lms)*pow(abs(lms), vec3(0.3333333333333)));
}
layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main () {
	uint index = gl_GlobalInvocationID.x;
	uint closest_mean = 0;
	vec3 color = pixels[index].color;
	float distance_to_closest = dot(color - means[0], color - means[0]);
	for (uint i = 1; i < constants.mean_count; i++) {
		float distance_to_mean = dot(color - means[i], color - means[i]);
		if (distance_to_mean < distance_to_closest) {
			closest_mean = i;
			distance_to_mean = distance_to_closest;
		}
	}
	pixels[index].mean = closest_mean;
}
